


//most people do this in python, which has numpy. I'm not, so here we will define any functions we use that normally would come from numpy

function dotProduct(matrix1, matrix2) {
    // First, check if the two matrices are compatible
    const rows1 = matrix1.length;
    const cols1 = matrix1[0].length;
    const rows2 = matrix2.length;
    const cols2 = matrix2[0].length;

    if (rows1 == 1 && rows2 == 1) {
        //logic for if we're multiplying two one dimensional matrices

        //for this our result will be a scalar so we just initialize to zero

        const result = 0

        for (let i = 0; i < cols1; i++) {
            result += matrix1[i] * matrix2[i]
        }

    } else if (cols1 !== rows2) {
        //catch the error if they arent both 1D but are not compatible:

        throw new Error("Matrices not compatible. Rows of the first matrix must equal columns of the second, or vice versa");
    } else {
        
        //initialize our result
        const result = new Array(rows1).fill(null).map(() => new Array(cols2).fill(0));
        
        for (let i = 0; i < rows1; i++) {
            for (let j = 0; j < cols2; j++) {
                for (let k = 0; k < cols1; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
    };
    return result;
}

/* testing
const matrix1 = [
    [1, 2],
    [3, 4],
];

const matrix2 = [
    [5, 6],
    [7, 8],
];

const resultMatrix = dotProduct(matrix1, matrix2);
console.log(resultMatrix);

*/


class Neuron {
    // Properties
    constructor(inputs, weights, bias) {
        this.setInputs(inputs);
        this.setWeights(weights);
        this.setBias(bias);
    }

    // Setter method for Inputs
    setInputs(inputs) {
        if (!inputs || !Array.isArray(inputs)) {
            throw new Error("Inputs must be a non-null array");
        }

        this.inputs = [...inputs];
    }

    // Setter method for Weights
    setWeights(weights) {
        if (!weights || !Array.isArray(weights)) {
            throw new Error("Weights must be a non-null array");
        }

        this.weights = [...weights];
    }

    // Setter method for Bias
    setBias(bias) {
        this.bias = bias;
    }
}



/* now onto coding our first layer */
const weights1 = [0.2, 0.8, -0.5, 1.0];
const weights2 = [0.5, -0.91, -0.26, -0.5];
const weights3 = [-0.26, -0.27, 0.17, 0.87];


/*
const bias1 = 2
const bias2 = 3
const bias3 = 0.5

//this represents a layer, where each element of our list is a neuron

const output = [inputs[0]*weights1[0] + inputs[1]*weights1[1] + inputs[2]*weights1[2] + inputs[3]*weights1[3], 
                inputs[0]*weights2[0] + inputs[1]*weights2[1] + inputs[2]*weights2[2] + inputs[3]*weights2[3], 
                inputs[0]*weights3[0] + inputs[1]*weights3[1] + inputs[2]*weights3[2] + inputs[3]*weights3[3]] ; 

console.log(output) */

console.log(dotProduct(weights1, weights2))

